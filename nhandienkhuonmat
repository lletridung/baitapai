{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN1sm3BPTaHchvnF64B63ip",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lletridung/baitapai/blob/main/nhandienkhuonmat\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.image import imread\n",
        "from os import listdir\n",
        "from numpy import asarray\n",
        "from numpy import save\n",
        "import pandas as pd\n",
        "from keras.models import Sequential,Model\n",
        "from keras.layers import Dense, Flatten,Conv2D,MaxPooling2D,Normalization,LeakyReLU,BatchNormalization, Dropout\n",
        "from keras.layers import Dropout,Activation\n",
        "from keras.optimizers import Adam\n",
        "from keras.losses import categorical_crossentropy\n",
        "from keras.utils import to_categorical\n",
        "from keras import optimizers\n",
        "from keras.models import Sequential,Model\n",
        "from keras.layers import Dense, Flatten,Conv2D,MaxPooling2D,Normalization,LeakyReLU\n",
        "from keras.layers import Dropout,Activation\n",
        "from keras.optimizers import Adam\n",
        "from keras.losses import categorical_crossentropy\n",
        "from tensorflow.keras.preprocessing.image import load_img, img_to_array"
      ],
      "metadata": {
        "id": "IhiyJ2S42uDu"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XTDlwmPlZPJi",
        "outputId": "c0e38a69-c6f6-430e-b92a-47efc56d52af"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "folder = '/content/drive/MyDrive/AI_img_mix/'\n",
        "photos,labels = list(),list()\n",
        "for file in listdir(folder):\n",
        "  if file.startswith('dung'):\n",
        "    output = 0\n",
        "    photo = load_img(folder+file,target_size=(40,30))\n",
        "    photo = img_to_array(photo)\n",
        "    photos.append(photo)\n",
        "    labels.append(output)\n",
        "for file in listdir(folder):\n",
        "  if file.startswith('thinh'):\n",
        "    output = 1\n",
        "    photo = load_img(folder+file,target_size=(40,30))\n",
        "    photo = img_to_array(photo)\n",
        "    photos.append(photo)\n",
        "    labels.append(output)\n",
        "for file in listdir(folder):\n",
        "  if file.startswith('EFGH'):\n",
        "    output = 1\n",
        "    photo = load_img(folder+file,target_size=(40,30))\n",
        "    photo = img_to_array(photo)\n",
        "    photos.append(photo)\n",
        "    labels.append(output)\n",
        "for file in listdir(folder):\n",
        "  if file.startswith('Truc'):\n",
        "    output = 1\n",
        "    photo = load_img(folder+file,target_size=(40,30))\n",
        "    photo = img_to_array(photo)\n",
        "    photos.append(photo)\n",
        "    labels.append(output)   \n",
        "\n",
        "photos=asarray(photos)\n",
        "labels=asarray(labels)\n",
        "print(photos.shape,labels.shape)\n",
        "save('dung_thinh_EFGH_Truc_photos.npy',photos)\n",
        "save('dung_thinh_EFGH_Truc_labels.npy',labels)"
      ],
      "metadata": {
        "id": "DkRl1V1EbD_-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f95c70bd-b816-468f-a352-22e72f0e12d4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(240, 40, 30, 3) (240,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(labels.shape)\n",
        "photos.shape"
      ],
      "metadata": {
        "id": "X5d1krBVhg-R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "570bf991-d553-4269-9ae7-5ea3b7dc1f89"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(240,)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(240, 40, 30, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential()\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(40,30,3)))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "\n",
        "model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "\n",
        "model.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Flatten())\n",
        "\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dense(10, activation='softmax'))\n",
        "\n",
        "\n",
        "model.compile(optimizer='Adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "wVyBqLKEfzOz"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(photos, labels, epochs=50, verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DEeYA6rxFxmu",
        "outputId": "a6e26fd5-2fa3-45a1-d575-5be83a12d015"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "8/8 [==============================] - 2s 92ms/step - loss: 59.5103 - accuracy: 0.6083\n",
            "Epoch 2/50\n",
            "8/8 [==============================] - 1s 114ms/step - loss: 2.3672 - accuracy: 0.9292\n",
            "Epoch 3/50\n",
            "8/8 [==============================] - 1s 153ms/step - loss: 0.0225 - accuracy: 0.9917\n",
            "Epoch 4/50\n",
            "8/8 [==============================] - 2s 234ms/step - loss: 1.4124e-04 - accuracy: 1.0000\n",
            "Epoch 5/50\n",
            "8/8 [==============================] - 2s 240ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 6/50\n",
            "8/8 [==============================] - 2s 267ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 7/50\n",
            "8/8 [==============================] - 2s 193ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 8/50\n",
            "8/8 [==============================] - 1s 174ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 9/50\n",
            "8/8 [==============================] - 1s 170ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 10/50\n",
            "8/8 [==============================] - 1s 159ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 11/50\n",
            "8/8 [==============================] - 1s 155ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 12/50\n",
            "8/8 [==============================] - 1s 171ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 13/50\n",
            "8/8 [==============================] - 1s 175ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 14/50\n",
            "8/8 [==============================] - 1s 186ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 15/50\n",
            "8/8 [==============================] - 1s 177ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 16/50\n",
            "8/8 [==============================] - 1s 153ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 17/50\n",
            "8/8 [==============================] - 1s 153ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 18/50\n",
            "8/8 [==============================] - 1s 151ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 19/50\n",
            "8/8 [==============================] - 1s 103ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 20/50\n",
            "8/8 [==============================] - 1s 83ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 21/50\n",
            "8/8 [==============================] - 1s 81ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 22/50\n",
            "8/8 [==============================] - 1s 87ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 23/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 24/50\n",
            "8/8 [==============================] - 1s 81ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 25/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 26/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 27/50\n",
            "8/8 [==============================] - 1s 87ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 28/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 29/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 30/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 31/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 32/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 33/50\n",
            "8/8 [==============================] - 1s 91ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 34/50\n",
            "8/8 [==============================] - 1s 150ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 35/50\n",
            "8/8 [==============================] - 1s 148ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 36/50\n",
            "8/8 [==============================] - 1s 153ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 37/50\n",
            "8/8 [==============================] - 1s 148ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 38/50\n",
            "8/8 [==============================] - 1s 143ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 39/50\n",
            "8/8 [==============================] - 1s 82ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 40/50\n",
            "8/8 [==============================] - 1s 82ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 41/50\n",
            "8/8 [==============================] - 1s 91ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 42/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 43/50\n",
            "8/8 [==============================] - 1s 82ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 44/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 45/50\n",
            "8/8 [==============================] - 1s 82ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 46/50\n",
            "8/8 [==============================] - 1s 80ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 47/50\n",
            "8/8 [==============================] - 1s 85ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 48/50\n",
            "8/8 [==============================] - 1s 80ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 49/50\n",
            "8/8 [==============================] - 1s 88ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n",
            "Epoch 50/50\n",
            "8/8 [==============================] - 1s 84ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.evaluate(photos,labels)"
      ],
      "metadata": {
        "id": "W5vkpa4OJA4x",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "852ff271-0c03-4348-f4a7-b4fadffb9e22"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8/8 [==============================] - 0s 24ms/step - loss: 0.0000e+00 - accuracy: 1.0000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.0, 1.0]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('Nhandangkhuonmat.h5')"
      ],
      "metadata": {
        "id": "YKUCHS2tfe7x"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "classes = [\"dung\",\"thinh\",\"Truc\",\"EFGH\"]"
      ],
      "metadata": {
        "id": "lEnqhNo-foC-"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img = load_img('/content/drive/MyDrive/AI_img_mix/dung (1).jpg', target_size=(40,30))\n",
        "plt.imshow(img)\n",
        "imgRe = img_to_array(img)\n",
        "imgRe = imgRe.reshape(1,40,30,3)  \n",
        "imgRe = imgRe.astype('float32')\n",
        "imgRe /= 255\n",
        "y_pred = model.predict(imgRe)\n",
        "print(y_pred)\n",
        "y_classes = [np.argmax(element) for element in y_pred]\n",
        "y_classes\n",
        "classes[y_classes[0]]"
      ],
      "metadata": {
        "id": "efJFtxsKf2pm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "outputId": "0befe1bd-7679-4e4e-8c2e-5e5c427463d5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 126ms/step\n",
            "[[0.36680084 0.13644443 0.04287561 0.06784863 0.07017037 0.15955019\n",
            "  0.0599261  0.06672632 0.0174152  0.01224227]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'dung'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = load_img('/content/drive/MyDrive/AI_img_mix/thinh (1).jpg', target_size=(40,30))\n",
        "plt.imshow(img)\n",
        "imgRe = img_to_array(img)\n",
        "imgRe = imgRe.reshape(1,40,30,3)  \n",
        "imgRe = imgRe.astype('float32')\n",
        "imgRe /= 255\n",
        "y_pred = model.predict(imgRe)\n",
        "print(y_pred)\n",
        "y_classes = [np.argmax(element) for element in y_pred]\n",
        "y_classes\n",
        "classes[y_classes[0]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "t7nOdO6vl_ge",
        "outputId": "9edb1b99-bdb4-4127-c681-86703d2df396"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 25ms/step\n",
            "[[0.12905186 0.43626645 0.07690345 0.04802851 0.07064418 0.09964315\n",
            "  0.0514176  0.04454739 0.02601735 0.01748005]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'thinh'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = load_img('/content/drive/MyDrive/AI_img_mix/Truc1.jpg', target_size=(40,30))\n",
        "plt.imshow(img)\n",
        "imgRe = img_to_array(img)\n",
        "imgRe = imgRe.reshape(1,40,30,3)  \n",
        "imgRe = imgRe.astype('float32')\n",
        "imgRe /= 255\n",
        "y_pred = model.predict(imgRe)\n",
        "print(y_pred)\n",
        "y_classes = [np.argmax(element) for element in y_pred]\n",
        "y_classes\n",
        "classes[y_classes[0]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "c-RbK6HOmI3m",
        "outputId": "106c2b20-7f07-4352-e3c2-fc84c79b72e1"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 37ms/step\n",
            "[[0.16127996 0.3360458  0.07698911 0.05525562 0.08454729 0.11915373\n",
            "  0.05737782 0.0611475  0.02754342 0.0206597 ]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'thinh'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = load_img('/content/drive/MyDrive/AI_img_mix/EFGH (1).jpg', target_size=(40,30))\n",
        "plt.imshow(img)\n",
        "imgRe = img_to_array(img)\n",
        "imgRe = imgRe.reshape(1,40,30,3)  \n",
        "imgRe = imgRe.astype('float32')\n",
        "imgRe /= 255\n",
        "y_pred = model.predict(imgRe)\n",
        "print(y_pred)\n",
        "y_classes = [np.argmax(element) for element in y_pred]\n",
        "y_classes\n",
        "classes[y_classes[0]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "sOVVtoFsmLhW",
        "outputId": "42068d8a-471b-45e5-86f3-cff23a7870be"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 22ms/step\n",
            "[[0.11553805 0.49235526 0.06817116 0.0432046  0.06466298 0.09586832\n",
            "  0.04638709 0.03734072 0.02252475 0.01394709]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'thinh'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}